/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license ( the "Software" ) to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.gles.functions2;

private {
    import derelict.gles.types2;
}

extern( System ) nothrow {
    alias da_glActiveTexture = void function( GLenum );
    alias da_glAttachShader = void function( GLuint, GLuint );
    alias da_glBindAttribLocation = void function( GLuint, GLuint, const GLchar* );
    alias da_glBindBuffer = void function( GLenum, GLuint );
    alias da_glBindFramebuffer = void function( GLenum, GLuint );
    alias da_glBindRenderbuffer = void function( GLenum, GLuint );
    alias da_glBindTexture = void function( GLenum, GLuint );
    alias da_glBlendColor = void function( GLfloat, GLfloat, GLfloat, GLfloat );
    alias da_glBlendEquation = void function( GLenum );
    alias da_glBlendEquationSeparate = void function( GLenum, GLenum );
    alias da_glBlendFunc = void function( GLenum, GLenum );
    alias da_glBlendFuncSeparate = void function( GLenum, GLenum dfactorRGB, GLenum, GLenum );
    alias da_glBufferData = void function( GLenum, GLsizeiptr, const void*, GLenum );
    alias da_glBufferSubData = void function( GLenum, GLintptr, GLsizeiptr, const void* );
    alias da_glCheckFramebufferStatus = GLenum function( GLenum );
    alias da_glClear = void function( GLbitfield );
    alias da_glClearColor = void function( GLfloat, GLfloat, GLfloat, GLfloat );
    alias da_glClearDepthf = void function( GLfloat );
    alias da_glClearStencil = void function( GLint );
    alias da_glColorMask = void function( GLboolean, GLboolean, GLboolean, GLboolean );
    alias da_glCompileShader = void function( GLuint );
    alias da_glCompressedTexImage2D = void function( GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void* );
    alias da_glCompressedTexSubImage2D = void function( GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void* );
    alias da_glCopyTexImage2D = void function( GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint );
    alias da_glCopyTexSubImage2D = void function( GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei );
    alias da_glCreateProgram = GLuint function(  );
    alias da_glCreateShader = GLuint function( GLenum );
    alias da_glCullFace = void function( GLenum );
    alias da_glDeleteBuffers = void function( GLsizei, const GLuint* );
    alias da_glDeleteFramebuffers = void function( GLsizei, const GLuint* );
    alias da_glDeleteProgram = void function( GLuint );
    alias da_glDeleteRenderbuffers = void function( GLsizei, const GLuint* );
    alias da_glDeleteShader = void function( GLuint );
    alias da_glDeleteTextures = void function( GLsizei, const GLuint* );
    alias da_glDepthFunc = void function( GLenum );
    alias da_glDepthMask = void function( GLboolean );
    alias da_glDepthRangef = void function( GLfloat, GLfloat );
    alias da_glDetachShader = void function( GLuint, GLuint );
    alias da_glDisable = void function( GLenum );
    alias da_glDisableVertexAttribArray = void function( GLuint );
    alias da_glDrawArrays = void function( GLenum, GLint, GLsizei );
    alias da_glDrawElements = void function( GLenum, GLsizei, GLenum, const void* );
    alias da_glEnable = void function( GLenum );
    alias da_glEnableVertexAttribArray = void function( GLuint );
    alias da_glFinish = void function(  );
    alias da_glFlush = void function(  );
    alias da_glFramebufferRenderbuffer = void function( GLenum, GLenum, GLenum, GLuint );
    alias da_glFramebufferTexture2D = void function( GLenum, GLenum, GLenum, GLuint, GLint );
    alias da_glFrontFace = void function( GLenum );
    alias da_glGenBuffers = void function( GLsizei, GLuint* );
    alias da_glGenerateMipmap = void function( GLenum );
    alias da_glGenFramebuffers = void function( GLsizei, GLuint* );
    alias da_glGenRenderbuffers = void function( GLsizei, GLuint* );
    alias da_glGenTextures = void function( GLsizei, GLuint* );
    alias da_glGetActiveAttrib = void function( GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar* );
    alias da_glGetActiveUniform = void function( GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar* );
    alias da_glGetAttachedShaders = void function( GLuint, GLsizei maxCount, GLsizei*, GLuint* );
    alias da_glGetAttribLocation = GLint function( GLuint, const GLchar* );
    alias da_glGetBooleanv = void function( GLenum, GLboolean* );
    alias da_glGetBufferParameteriv = void function( GLenum, GLenum, GLint* );
    alias da_glGetError = GLenum function(  );
    alias da_glGetFloatv = void function( GLenum, GLfloat* );
    alias da_glGetFramebufferAttachmentParameteriv = void function( GLenum, GLenum, GLenum, GLint* );
    alias da_glGetIntegerv = void function( GLenum, GLint* );
    alias da_glGetProgramiv = void function( GLuint, GLenum, GLint* );
    alias da_glGetProgramInfoLog = void function( GLuint, GLsizei, GLsizei*, GLchar*infoLog );
    alias da_glGetRenderbufferParameteriv = void function( GLenum, GLenum, GLint* );
    alias da_glGetShaderiv = void function( GLuint, GLenum, GLint* );
    alias da_glGetShaderInfoLog = void function( GLuint, GLsizei, GLsizei*, GLchar*infoLog );
    alias da_glGetShaderPrecisionFormat = void function( GLenum, GLenum, GLint*, GLint* );
    alias da_glGetShaderSource = void function( GLuint, GLsizei, GLsizei*, GLchar* );
    alias da_glGetString = const( char )* function( GLenum );
    alias da_glGetTexParameterfv = void function( GLenum, GLenum, GLfloat* );
    alias da_glGetTexParameteriv = void function( GLenum, GLenum, GLint* );
    alias da_glGetUniformfv = void function( GLuint, GLint, GLfloat* );
    alias da_glGetUniformiv = void function( GLuint, GLint, GLint* );
    alias da_glGetUniformLocation = GLint function( GLuint, const GLchar* );
    alias da_glGetVertexAttribfv = void function( GLuint, GLenum, GLfloat* );
    alias da_glGetVertexAttribiv = void function( GLuint, GLenum, GLint* );
    alias da_glGetVertexAttribPointerv = void function( GLuint, GLenum, void** );
    alias da_glHint = void function( GLenum, GLenum );
    alias da_glIsBuffer = GLboolean function( GLuint );
    alias da_glIsEnabled = GLboolean function( GLenum );
    alias da_glIsFramebuffer = GLboolean function( GLuint );
    alias da_glIsProgram = GLboolean function( GLuint );
    alias da_glIsRenderbuffer = GLboolean function( GLuint );
    alias da_glIsShader = GLboolean function( GLuint );
    alias da_glIsTexture = GLboolean function( GLuint );
    alias da_glLineWidth = void function( GLfloat );
    alias da_glLinkProgram = void function( GLuint );
    alias da_glPixelStorei = void function( GLenum, GLint );
    alias da_glPolygonOffset = void function( GLfloat, GLfloat );
    alias da_glReadPixels = void function( GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void* );
    alias da_glReleaseShaderCompiler = void function(  );
    alias da_glRenderbufferStorage = void function( GLenum, GLenum, GLsizei, GLsizei );
    alias da_glSampleCoverage = void function( GLfloat, GLboolean );
    alias da_glScissor = void function( GLint, GLint, GLsizei, GLsizei );
    alias da_glShaderBinary = void function( GLsizei, const GLuint*, GLenum, const void*, GLsizei );
    alias da_glShaderSource = void function( GLuint, GLsizei, const( const( GLchar )* )*, const GLint* );
    alias da_glStencilFunc = void function( GLenum, GLint, GLuint );
    alias da_glStencilFuncSeparate = void function( GLenum, GLenum, GLint, GLuint );
    alias da_glStencilMask = void function( GLuint );
    alias da_glStencilMaskSeparate = void function( GLenum, GLuint );
    alias da_glStencilOp = void function( GLenum, GLenum, GLenum );
    alias da_glStencilOpSeparate = void function( GLenum, GLenum, GLenum, GLenum );
    alias da_glTexImage2D = void function( GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void* );
    alias da_glTexParameterf = void function( GLenum, GLenum, GLfloat );
    alias da_glTexParameterfv = void function( GLenum, GLenum, const GLfloat* );
    alias da_glTexParameteri = void function( GLenum, GLenum, GLint );
    alias da_glTexParameteriv = void function( GLenum, GLenum, const GLint* );
    alias da_glTexSubImage2D = void function( GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void* );
    alias da_glUniform1f = void function( GLint, GLfloat v0 );
    alias da_glUniform1fv = void function( GLint, GLsizei, const GLfloat* );
    alias da_glUniform1i = void function( GLint, GLint v0 );
    alias da_glUniform1iv = void function( GLint, GLsizei, const GLint* );
    alias da_glUniform2f = void function( GLint, GLfloat v0, GLfloat v1 );
    alias da_glUniform2fv = void function( GLint, GLsizei, const GLfloat* );
    alias da_glUniform2i = void function( GLint, GLint v0, GLint v1 );
    alias da_glUniform2iv = void function( GLint, GLsizei, const GLint* );
    alias da_glUniform3f = void function( GLint, GLfloat v0, GLfloat v1, GLfloat v2 );
    alias da_glUniform3fv = void function( GLint, GLsizei, const GLfloat* );
    alias da_glUniform3i = void function( GLint, GLint v0, GLint v1, GLint v2 );
    alias da_glUniform3iv = void function( GLint, GLsizei, const GLint* );
    alias da_glUniform4f = void function( GLint, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3 );
    alias da_glUniform4fv = void function( GLint, GLsizei, const GLfloat* );
    alias da_glUniform4i = void function( GLint, GLint v0, GLint v1, GLint v2, GLint v3 );
    alias da_glUniform4iv = void function( GLint, GLsizei, const GLint* );
    alias da_glUniformMatrix2fv = void function( GLint, GLsizei, GLboolean, const GLfloat* );
    alias da_glUniformMatrix3fv = void function( GLint, GLsizei, GLboolean, const GLfloat* );
    alias da_glUniformMatrix4fv = void function( GLint, GLsizei, GLboolean, const GLfloat* );
    alias da_glUseProgram = void function( GLuint );
    alias da_glValidateProgram = void function( GLuint );
    alias da_glVertexAttrib1f = void function( GLuint, GLfloat );
    alias da_glVertexAttrib1fv = void function( GLuint, const GLfloat* );
    alias da_glVertexAttrib2f = void function( GLuint, GLfloat, GLfloat );
    alias da_glVertexAttrib2fv = void function( GLuint, const GLfloat* );
    alias da_glVertexAttrib3f = void function( GLuint, GLfloat, GLfloat, GLfloat );
    alias da_glVertexAttrib3fv = void function( GLuint, const GLfloat* );
    alias da_glVertexAttrib4f = void function( GLuint, GLfloat, GLfloat, GLfloat, GLfloat );
    alias da_glVertexAttrib4fv = void function( GLuint, const GLfloat* );
    alias da_glVertexAttribPointer = void function( GLuint, GLint, GLenum, GLboolean, GLsizei, const void* );
    alias da_glViewport = void function( GLint, GLint, GLsizei, GLsizei );
}

__gshared {
    da_glActiveTexture glActiveTexture;
    da_glAttachShader glAttachShader;
    da_glBindAttribLocation glBindAttribLocation;
    da_glBindBuffer glBindBuffer;
    da_glBindFramebuffer glBindFramebuffer;
    da_glBindRenderbuffer glBindRenderbuffer;
    da_glBindTexture glBindTexture;
    da_glBlendColor glBlendColor;
    da_glBlendEquation glBlendEquation;
    da_glBlendEquationSeparate glBlendEquationSeparate;
    da_glBlendFunc glBlendFunc;
    da_glBlendFuncSeparate glBlendFuncSeparate;
    da_glBufferData glBufferData;
    da_glBufferSubData glBufferSubData;
    da_glCheckFramebufferStatus glCheckFramebufferStatus;
    da_glClear glClear;
    da_glClearColor glClearColor;
    da_glClearDepthf glClearDepthf;
    da_glClearStencil glClearStencil;
    da_glColorMask glColorMask;
    da_glCompileShader glCompileShader;
    da_glCompressedTexImage2D glCompressedTexImage2D;
    da_glCompressedTexSubImage2D glCompressedTexSubImage2D;
    da_glCopyTexImage2D glCopyTexImage2D;
    da_glCopyTexSubImage2D glCopyTexSubImage2D;
    da_glCreateProgram glCreateProgram;
    da_glCreateShader glCreateShader;
    da_glCullFace glCullFace;
    da_glDeleteBuffers glDeleteBuffers;
    da_glDeleteFramebuffers glDeleteFramebuffers;
    da_glDeleteProgram glDeleteProgram;
    da_glDeleteRenderbuffers glDeleteRenderbuffers;
    da_glDeleteShader glDeleteShader;
    da_glDeleteTextures glDeleteTextures;
    da_glDepthFunc glDepthFunc;
    da_glDepthMask glDepthMask;
    da_glDepthRangef glDepthRangef;
    da_glDetachShader glDetachShader;
    da_glDisable glDisable;
    da_glDisableVertexAttribArray glDisableVertexAttribArray;
    da_glDrawArrays glDrawArrays;
    da_glDrawElements glDrawElements;
    da_glEnable glEnable;
    da_glEnableVertexAttribArray glEnableVertexAttribArray;
    da_glFinish glFinish;
    da_glFlush glFlush;
    da_glFramebufferRenderbuffer glFramebufferRenderbuffer;
    da_glFramebufferTexture2D glFramebufferTexture2D;
    da_glFrontFace glFrontFace;
    da_glGenBuffers glGenBuffers;
    da_glGenerateMipmap glGenerateMipmap;
    da_glGenFramebuffers glGenFramebuffers;
    da_glGenRenderbuffers glGenRenderbuffers;
    da_glGenTextures glGenTextures;
    da_glGetActiveAttrib glGetActiveAttrib;
    da_glGetActiveUniform glGetActiveUniform;
    da_glGetAttachedShaders glGetAttachedShaders;
    da_glGetAttribLocation glGetAttribLocation;
    da_glGetBooleanv glGetBooleanv;
    da_glGetBufferParameteriv glGetBufferParameteriv;
    da_glGetError glGetError;
    da_glGetFloatv glGetFloatv;
    da_glGetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv;
    da_glGetIntegerv glGetIntegerv;
    da_glGetProgramiv glGetProgramiv;
    da_glGetProgramInfoLog glGetProgramInfoLog;
    da_glGetRenderbufferParameteriv glGetRenderbufferParameteriv;
    da_glGetShaderiv glGetShaderiv;
    da_glGetShaderInfoLog glGetShaderInfoLog;
    da_glGetShaderPrecisionFormat glGetShaderPrecisionFormat;
    da_glGetShaderSource glGetShaderSource;
    da_glGetString glGetString;
    da_glGetTexParameterfv glGetTexParameterfv;
    da_glGetTexParameteriv glGetTexParameteriv;
    da_glGetUniformfv glGetUniformfv;
    da_glGetUniformiv glGetUniformiv;
    da_glGetUniformLocation glGetUniformLocation;
    da_glGetVertexAttribfv glGetVertexAttribfv;
    da_glGetVertexAttribiv glGetVertexAttribiv;
    da_glGetVertexAttribPointerv glGetVertexAttribPointerv;
    da_glHint glHint;
    da_glIsBuffer glIsBuffer;
    da_glIsEnabled glIsEnabled;
    da_glIsFramebuffer glIsFramebuffer;
    da_glIsProgram glIsProgram;
    da_glIsRenderbuffer glIsRenderbuffer;
    da_glIsShader glIsShader;
    da_glIsTexture glIsTexture;
    da_glLineWidth glLineWidth;
    da_glLinkProgram glLinkProgram;
    da_glPixelStorei glPixelStorei;
    da_glPolygonOffset glPolygonOffset;
    da_glReadPixels glReadPixels;
    da_glReleaseShaderCompiler glReleaseShaderCompiler;
    da_glRenderbufferStorage glRenderbufferStorage;
    da_glSampleCoverage glSampleCoverage;
    da_glScissor glScissor;
    da_glShaderBinary glShaderBinary;
    da_glShaderSource glShaderSource;
    da_glStencilFunc glStencilFunc;
    da_glStencilFuncSeparate glStencilFuncSeparate;
    da_glStencilMask glStencilMask;
    da_glStencilMaskSeparate glStencilMaskSeparate;
    da_glStencilOp glStencilOp;
    da_glStencilOpSeparate glStencilOpSeparate;
    da_glTexImage2D glTexImage2D;
    da_glTexParameterf glTexParameterf;
    da_glTexParameterfv glTexParameterfv;
    da_glTexParameteri glTexParameteri;
    da_glTexParameteriv glTexParameteriv;
    da_glTexSubImage2D glTexSubImage2D;
    da_glUniform1f glUniform1f;
    da_glUniform1fv glUniform1fv;
    da_glUniform1i glUniform1i;
    da_glUniform1iv glUniform1iv;
    da_glUniform2f glUniform2f;
    da_glUniform2fv glUniform2fv;
    da_glUniform2i glUniform2i;
    da_glUniform2iv glUniform2iv;
    da_glUniform3f glUniform3f;
    da_glUniform3fv glUniform3fv;
    da_glUniform3i glUniform3i;
    da_glUniform3iv glUniform3iv;
    da_glUniform4f glUniform4f;
    da_glUniform4fv glUniform4fv;
    da_glUniform4i glUniform4i;
    da_glUniform4iv glUniform4iv;
    da_glUniformMatrix2fv glUniformMatrix2fv;
    da_glUniformMatrix3fv glUniformMatrix3fv;
    da_glUniformMatrix4fv glUniformMatrix4fv;
    da_glUseProgram glUseProgram;
    da_glValidateProgram glValidateProgram;
    da_glVertexAttrib1f glVertexAttrib1f;
    da_glVertexAttrib1fv glVertexAttrib1fv;
    da_glVertexAttrib2f glVertexAttrib2f;
    da_glVertexAttrib2fv glVertexAttrib2fv;
    da_glVertexAttrib3f glVertexAttrib3f;
    da_glVertexAttrib3fv glVertexAttrib3fv;
    da_glVertexAttrib4f glVertexAttrib4f;
    da_glVertexAttrib4fv glVertexAttrib4fv;
    da_glVertexAttribPointer glVertexAttribPointer;
    da_glViewport glViewport;
}
