/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.gles.gles3;

public {
    import derelict.gles.types3;
    import derelict.gles.constants3;
    import derelict.gles.ext3;
    import derelict.gles.functions3;
}

private {
    import derelict.gles.egl;
    import derelict.gles.gles2;
    import derelict.util.loader;
    import derelict.util.exception;
    import derelict.util.system;
    import std.conv;

    static if( Derelict_OS_Posix ) {
        // Same as GLESv2 on Linux.
        enum libNames = "libGLESv2.so.2,libGLESv2.so";
    } else
        static assert( 0, "Need to implement OpenGLESv3 libNames for this operating system." );
}

class DerelictGLES3Loader : DerelictGLES2Loader
{
    private GLESVersion _loadedVersion;

    public
    {
        this() {
            super( libNames );
        }

        override GLESVersion reload() {
            loadEXT3(  );

            return _loadedVersion;
        }

        protected override void loadSymbols() {
            super.loadSymbols(  );

            // Now the fun begins. We need to query for the version of GLES,
            // but we need to do so using a valid context. So first we do the
            // EGL dance, make a minimal context, query, make a copy, tear
            // things down, then we can finally know what to load.

            // First, before we start anything, we need EGL 1.3 to even say we
            // want a 3.x context, so let's start here.
            if( DerelictEGL.loadedVersion(  ) <= EGLVersion.EGL12 ) {
                throw new DerelictException( "EGL is too old to check for GLES3 support." );
            }

            // Initialize EGL.
            EGLDisplay disp = eglGetDisplay( EGL_DEFAULT_DISPLAY );
            if( disp == EGL_NO_DISPLAY ) {
                throw new DerelictException( "Unable to get a display for EGL" );
            }
            if( eglInitialize( disp, null, null ) == EGL_FALSE ) {
                throw new DerelictException( "Failed to initialize the EGL display: " ~ to!string( eglGetError(  ) ) );
            }

            // Find a minimal configuration.
            EGLConfig config;
            EGLint nConfig;
            EGLBoolean gotConfig = eglChooseConfig( disp, null, &config, 1, &nConfig);
            if( !gotConfig ) {
                eglTerminate( disp );
                throw new DerelictException( "Failed to find a suitable configuration: " ~ to!string( eglGetError(  ) ) );
            }
            if( !nConfig ) {
                eglTerminate( disp );
                throw new DerelictException( "Failed to find any configurations: " ~ to!string( eglGetError(  ) ) );
            }

            // Create a barebones surface.
            EGLSurface surf = eglCreatePbufferSurface( disp, config, null );
            if( surf == EGL_NO_SURFACE ) {
                eglTerminate( disp );
                throw new DerelictException( "Failed to create a surface: " ~ to!string( eglGetError(  ) ) );
            }

            // Create the context.
            const EGLint[] ctxAttribs = [
                EGL_CONTEXT_CLIENT_VERSION, 3, // Request a 3.x context.
                EGL_NONE
            ];
            EGLContext ctx = eglCreateContext( disp, config, EGL_NO_CONTEXT, ctxAttribs.ptr );
            if( ctx == EGL_NO_CONTEXT ) {
                eglDestroySurface( disp, surf );
                eglTerminate( disp );
                throw new DerelictException( "Failed to create a GLESv3 context: " ~ to!string( eglGetError(  ) ) );
            }

            // Make the context current.
            EGLBoolean isCurrent = eglMakeCurrent( disp, surf, surf, ctx );
            if( !isCurrent ) {
                eglDestroyContext( disp, ctx );
                eglDestroySurface( disp, surf );
                eglTerminate( disp );

                throw new DerelictException( "Failed to make the context current: " ~ to!string( eglGetError(  ) ) );
            }

            // Finally get the version string.
            const( ubyte )* verstr = glGetString( GL_VERSION );
            // The format for the version string is:
            //   OpenGL ES x.y <vendor info>
            char major = *( verstr + 10  );
            char minor = *( verstr + 12 );

            // Tear it all down.
            eglDestroyContext( disp, ctx );
            eglDestroySurface( disp, surf );
            eglTerminate( disp );

            // OpenGLES 3.0
            bindFunc( cast( void** )&glReadBuffer, "glReadBuffer" );
            bindFunc( cast( void** )&glDrawRangeElements, "glDrawRangeElements" );
            bindFunc( cast( void** )&glTexImage3D, "glTexImage3D" );
            bindFunc( cast( void** )&glTexSubImage3D, "glTexSubImage3D" );
            bindFunc( cast( void** )&glCopyTexSubImage3D, "glCopyTexSubImage3D" );
            bindFunc( cast( void** )&glCompressedTexImage3D, "glCompressedTexImage3D" );
            bindFunc( cast( void** )&glCompressedTexSubImage3D, "glCompressedTexSubImage3D" );
            bindFunc( cast( void** )&glGenQueries, "glGenQueries" );
            bindFunc( cast( void** )&glDeleteQueries, "glDeleteQueries" );
            bindFunc( cast( void** )&glIsQuery, "glIsQuery" );
            bindFunc( cast( void** )&glBeginQuery, "glBeginQuery" );
            bindFunc( cast( void** )&glEndQuery, "glEndQuery" );
            bindFunc( cast( void** )&glGetQueryiv, "glGetQueryiv" );
            bindFunc( cast( void** )&glGetQueryObjectuiv, "glGetQueryObjectuiv" );
            bindFunc( cast( void** )&glUnmapBuffer, "glUnmapBuffer" );
            bindFunc( cast( void** )&glGetBufferPointerv, "glGetBufferPointerv" );
            bindFunc( cast( void** )&glDrawBuffers, "glDrawBuffers" );
            bindFunc( cast( void** )&glUniformMatrix2x3fv, "glUniformMatrix2x3fv" );
            bindFunc( cast( void** )&glUniformMatrix3x2fv, "glUniformMatrix3x2fv" );
            bindFunc( cast( void** )&glUniformMatrix2x4fv, "glUniformMatrix2x4fv" );
            bindFunc( cast( void** )&glUniformMatrix4x2fv, "glUniformMatrix4x2fv" );
            bindFunc( cast( void** )&glUniformMatrix3x4fv, "glUniformMatrix3x4fv" );
            bindFunc( cast( void** )&glUniformMatrix4x3fv, "glUniformMatrix4x3fv" );
            bindFunc( cast( void** )&glBlitFramebuffer, "glBlitFramebuffer" );
            bindFunc( cast( void** )&glRenderbufferStorageMultisample, "glRenderbufferStorageMultisample" );
            bindFunc( cast( void** )&glFramebufferTextureLayer, "glFramebufferTextureLayer" );
            bindFunc( cast( void** )&glMapBufferRange, "glMapBufferRange" );
            bindFunc( cast( void** )&glFlushMappedBufferRange, "glFlushMappedBufferRange" );
            bindFunc( cast( void** )&glBindVertexArray, "glBindVertexArray" );
            bindFunc( cast( void** )&glDeleteVertexArrays, "glDeleteVertexArrays" );
            bindFunc( cast( void** )&glGenVertexArrays, "glGenVertexArrays" );
            bindFunc( cast( void** )&glIsVertexArray, "glIsVertexArray" );
            bindFunc( cast( void** )&glGetIntegeri_v, "glGetIntegeri_v" );
            bindFunc( cast( void** )&glBeginTransformFeedback, "glBeginTransformFeedback" );
            bindFunc( cast( void** )&glEndTransformFeedback, "glEndTransformFeedback" );
            bindFunc( cast( void** )&glBindBufferRange, "glBindBufferRange" );
            bindFunc( cast( void** )&glBindBufferBase, "glBindBufferBase" );
            bindFunc( cast( void** )&glTransformFeedbackVaryings, "glTransformFeedbackVaryings" );
            bindFunc( cast( void** )&glGetTransformFeedbackVarying, "glGetTransformFeedbackVarying" );
            bindFunc( cast( void** )&glVertexAttribIPointer, "glVertexAttribIPointer" );
            bindFunc( cast( void** )&glGetVertexAttribIiv, "glGetVertexAttribIiv" );
            bindFunc( cast( void** )&glGetVertexAttribIuiv, "glGetVertexAttribIuiv" );
            bindFunc( cast( void** )&glVertexAttribI4i, "glVertexAttribI4i" );
            bindFunc( cast( void** )&glVertexAttribI4ui, "glVertexAttribI4ui" );
            bindFunc( cast( void** )&glVertexAttribI4iv, "glVertexAttribI4iv" );
            bindFunc( cast( void** )&glVertexAttribI4uiv, "glVertexAttribI4uiv" );
            bindFunc( cast( void** )&glGetUniformuiv, "glGetUniformuiv" );
            bindFunc( cast( void** )&glGetFragDataLocation, "glGetFragDataLocation" );
            bindFunc( cast( void** )&glUniform1ui, "glUniform1ui" );
            bindFunc( cast( void** )&glUniform2ui, "glUniform2ui" );
            bindFunc( cast( void** )&glUniform3ui, "glUniform3ui" );
            bindFunc( cast( void** )&glUniform4ui, "glUniform4ui" );
            bindFunc( cast( void** )&glUniform1uiv, "glUniform1uiv" );
            bindFunc( cast( void** )&glUniform2uiv, "glUniform2uiv" );
            bindFunc( cast( void** )&glUniform3uiv, "glUniform3uiv" );
            bindFunc( cast( void** )&glUniform4uiv, "glUniform4uiv" );
            bindFunc( cast( void** )&glClearBufferiv, "glClearBufferiv" );
            bindFunc( cast( void** )&glClearBufferuiv, "glClearBufferuiv" );
            bindFunc( cast( void** )&glClearBufferfv, "glClearBufferfv" );
            bindFunc( cast( void** )&glClearBufferfi, "glClearBufferfi" );
            bindFunc( cast( void** )&glGetStringi, "glGetStringi" );
            bindFunc( cast( void** )&glCopyBufferSubData, "glCopyBufferSubData" );
            bindFunc( cast( void** )&glGetUniformIndices, "glGetUniformIndices" );
            bindFunc( cast( void** )&glGetActiveUniformsiv, "glGetActiveUniformsiv" );
            bindFunc( cast( void** )&glGetUniformBlockIndex, "glGetUniformBlockIndex" );
            bindFunc( cast( void** )&glGetActiveUniformBlockiv, "glGetActiveUniformBlockiv" );
            bindFunc( cast( void** )&glGetActiveUniformBlockName, "glGetActiveUniformBlockName" );
            bindFunc( cast( void** )&glUniformBlockBinding, "glUniformBlockBinding" );
            bindFunc( cast( void** )&glDrawArraysInstanced, "glDrawArraysInstanced" );
            bindFunc( cast( void** )&glDrawElementsInstanced, "glDrawElementsInstanced" );
            bindFunc( cast( void** )&glFenceSync, "glFenceSync" );
            bindFunc( cast( void** )&glIsSync, "glIsSync" );
            bindFunc( cast( void** )&glDeleteSync, "glDeleteSync" );
            bindFunc( cast( void** )&glClientWaitSync, "glClientWaitSync" );
            bindFunc( cast( void** )&glWaitSync, "glWaitSync" );
            bindFunc( cast( void** )&glGetInteger64v, "glGetInteger64v" );
            bindFunc( cast( void** )&glGetSynciv, "glGetSynciv" );
            bindFunc( cast( void** )&glGetInteger64i_v, "glGetInteger64i_v" );
            bindFunc( cast( void** )&glGetBufferParameteri64v, "glGetBufferParameteri64v" );
            bindFunc( cast( void** )&glGenSamplers, "glGenSamplers" );
            bindFunc( cast( void** )&glDeleteSamplers, "glDeleteSamplers" );
            bindFunc( cast( void** )&glIsSampler, "glIsSampler" );
            bindFunc( cast( void** )&glBindSampler, "glBindSampler" );
            bindFunc( cast( void** )&glSamplerParameteri, "glSamplerParameteri" );
            bindFunc( cast( void** )&glSamplerParameteriv, "glSamplerParameteriv" );
            bindFunc( cast( void** )&glSamplerParameterf, "glSamplerParameterf" );
            bindFunc( cast( void** )&glSamplerParameterfv, "glSamplerParameterfv" );
            bindFunc( cast( void** )&glGetSamplerParameteriv, "glGetSamplerParameteriv" );
            bindFunc( cast( void** )&glGetSamplerParameterfv, "glGetSamplerParameterfv" );
            bindFunc( cast( void** )&glVertexAttribDivisor, "glVertexAttribDivisor" );
            bindFunc( cast( void** )&glBindTransformFeedback, "glBindTransformFeedback" );
            bindFunc( cast( void** )&glDeleteTransformFeedbacks, "glDeleteTransformFeedbacks" );
            bindFunc( cast( void** )&glGenTransformFeedbacks, "glGenTransformFeedbacks" );
            bindFunc( cast( void** )&glIsTransformFeedback, "glIsTransformFeedback" );
            bindFunc( cast( void** )&glPauseTransformFeedback, "glPauseTransformFeedback" );
            bindFunc( cast( void** )&glResumeTransformFeedback, "glResumeTransformFeedback" );
            bindFunc( cast( void** )&glGetProgramBinary, "glGetProgramBinary" );
            bindFunc( cast( void** )&glProgramBinary, "glProgramBinary" );
            bindFunc( cast( void** )&glProgramParameteri, "glProgramParameteri" );
            bindFunc( cast( void** )&glInvalidateFramebuffer, "glInvalidateFramebuffer" );
            bindFunc( cast( void** )&glInvalidateSubFramebuffer, "glInvalidateSubFramebuffer" );
            bindFunc( cast( void** )&glTexStorage2D, "glTexStorage2D" );
            bindFunc( cast( void** )&glTexStorage3D, "glTexStorage3D" );
            bindFunc( cast( void** )&glGetInternalformativ, "glGetInternalformativ" );

            _loadedVersion = GLESVersion.GLES30;

            if( minor == '1' ) {
                bindFunc( cast( void** )&glDispatchCompute, "glDispatchCompute" );
                bindFunc( cast( void** )&glDispatchComputeIndirect, "glDispatchComputeIndirect" );
                bindFunc( cast( void** )&glDrawArraysIndirect, "glDrawArraysIndirect" );
                bindFunc( cast( void** )&glDrawElementsIndirect, "glDrawElementsIndirect" );
                bindFunc( cast( void** )&glFramebufferParameteri, "glFramebufferParameteri" );
                bindFunc( cast( void** )&glGetFramebufferParameteriv, "glGetFramebufferParameteriv" );
                bindFunc( cast( void** )&glGetProgramInterfaceiv, "glGetProgramInterfaceiv" );
                bindFunc( cast( void** )&glGetProgramResourceIndex, "glGetProgramResourceIndex" );
                bindFunc( cast( void** )&glGetProgramResourceName, "glGetProgramResourceName" );
                bindFunc( cast( void** )&glGetProgramResourceiv, "glGetProgramResourceiv" );
                bindFunc( cast( void** )&glGetProgramResourceLocation, "glGetProgramResourceLocation" );
                bindFunc( cast( void** )&glUseProgramStages, "glUseProgramStages" );
                bindFunc( cast( void** )&glActiveShaderProgram, "glActiveShaderProgram" );
                bindFunc( cast( void** )&glCreateShaderProgramv, "glCreateShaderProgramv" );
                bindFunc( cast( void** )&glBindProgramPipeline, "glBindProgramPipeline" );
                bindFunc( cast( void** )&glDeleteProgramPipelines, "glDeleteProgramPipelines" );
                bindFunc( cast( void** )&glGenProgramPipelines, "glGenProgramPipelines" );
                bindFunc( cast( void** )&glIsProgramPipeline, "glIsProgramPipeline" );
                bindFunc( cast( void** )&glGetProgramPipelineiv, "glGetProgramPipelineiv" );
                bindFunc( cast( void** )&glProgramUniform1i, "glProgramUniform1i" );
                bindFunc( cast( void** )&glProgramUniform2i, "glProgramUniform2i" );
                bindFunc( cast( void** )&glProgramUniform3i, "glProgramUniform3i" );
                bindFunc( cast( void** )&glProgramUniform4i, "glProgramUniform4i" );
                bindFunc( cast( void** )&glProgramUniform1ui, "glProgramUniform1ui" );
                bindFunc( cast( void** )&glProgramUniform2ui, "glProgramUniform2ui" );
                bindFunc( cast( void** )&glProgramUniform3ui, "glProgramUniform3ui" );
                bindFunc( cast( void** )&glProgramUniform4ui, "glProgramUniform4ui" );
                bindFunc( cast( void** )&glProgramUniform1f, "glProgramUniform1f" );
                bindFunc( cast( void** )&glProgramUniform2f, "glProgramUniform2f" );
                bindFunc( cast( void** )&glProgramUniform3f, "glProgramUniform3f" );
                bindFunc( cast( void** )&glProgramUniform4f, "glProgramUniform4f" );
                bindFunc( cast( void** )&glProgramUniform1iv, "glProgramUniform1iv" );
                bindFunc( cast( void** )&glProgramUniform2iv, "glProgramUniform2iv" );
                bindFunc( cast( void** )&glProgramUniform3iv, "glProgramUniform3iv" );
                bindFunc( cast( void** )&glProgramUniform4iv, "glProgramUniform4iv" );
                bindFunc( cast( void** )&glProgramUniform1uiv, "glProgramUniform1uiv" );
                bindFunc( cast( void** )&glProgramUniform2uiv, "glProgramUniform2uiv" );
                bindFunc( cast( void** )&glProgramUniform3uiv, "glProgramUniform3uiv" );
                bindFunc( cast( void** )&glProgramUniform4uiv, "glProgramUniform4uiv" );
                bindFunc( cast( void** )&glProgramUniform1fv, "glProgramUniform1fv" );
                bindFunc( cast( void** )&glProgramUniform2fv, "glProgramUniform2fv" );
                bindFunc( cast( void** )&glProgramUniform3fv, "glProgramUniform3fv" );
                bindFunc( cast( void** )&glProgramUniform4fv, "glProgramUniform4fv" );
                bindFunc( cast( void** )&glProgramUniformMatrix2fv, "glProgramUniformMatrix2fv" );
                bindFunc( cast( void** )&glProgramUniformMatrix3fv, "glProgramUniformMatrix3fv" );
                bindFunc( cast( void** )&glProgramUniformMatrix4fv, "glProgramUniformMatrix4fv" );
                bindFunc( cast( void** )&glProgramUniformMatrix2x3fv, "glProgramUniformMatrix2x3fv" );
                bindFunc( cast( void** )&glProgramUniformMatrix3x2fv, "glProgramUniformMatrix3x2fv" );
                bindFunc( cast( void** )&glProgramUniformMatrix2x4fv, "glProgramUniformMatrix2x4fv" );
                bindFunc( cast( void** )&glProgramUniformMatrix4x2fv, "glProgramUniformMatrix4x2fv" );
                bindFunc( cast( void** )&glProgramUniformMatrix3x4fv, "glProgramUniformMatrix3x4fv" );
                bindFunc( cast( void** )&glProgramUniformMatrix4x3fv, "glProgramUniformMatrix4x3fv" );
                bindFunc( cast( void** )&glValidateProgramPipeline, "glValidateProgramPipeline" );
                bindFunc( cast( void** )&glGetProgramPipelineInfoLog, "glGetProgramPipelineInfoLog" );
                bindFunc( cast( void** )&glBindImageTexture, "glBindImageTexture" );
                bindFunc( cast( void** )&glGetBooleani_v, "glGetBooleani_v" );
                bindFunc( cast( void** )&glMemoryBarrier, "glMemoryBarrier" );
                bindFunc( cast( void** )&glMemoryBarrierByRegion, "glMemoryBarrierByRegion" );
                bindFunc( cast( void** )&glTexStorage2DMultisample, "glTexStorage2DMultisample" );
                bindFunc( cast( void** )&glGetMultisamplefv, "glGetMultisamplefv" );
                bindFunc( cast( void** )&glSampleMaski, "glSampleMaski" );
                bindFunc( cast( void** )&glGetTexLevelParameteriv, "glGetTexLevelParameteriv" );
                bindFunc( cast( void** )&glGetTexLevelParameterfv, "glGetTexLevelParameterfv" );
                bindFunc( cast( void** )&glBindVertexBuffer, "glBindVertexBuffer" );
                bindFunc( cast( void** )&glVertexAttribFormat, "glVertexAttribFormat" );
                bindFunc( cast( void** )&glVertexAttribIFormat, "glVertexAttribIFormat" );
                bindFunc( cast( void** )&glVertexAttribBinding, "glVertexAttribBinding" );
                bindFunc( cast( void** )&glVertexBindingDivisor, "glVertexBindingDivisor" );

                _loadedVersion = GLESVersion.GLES31;
            }
        }
    }
}

__gshared DerelictGLES3Loader DerelictGLES3;

shared static this() {
    DerelictGLES3 = new DerelictGLES3Loader;
}
